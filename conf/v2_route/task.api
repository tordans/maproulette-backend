###
# tags: [ Task ]
# summary: Retrieves a history for the task
# description: Retrieves list of task history log entries. This includes comments,
#              status actions, and review actions.
# responses:
#   '200':
#     description: List of log entries
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: id
#     in: path
#     description: The id of the task
###
GET     /task/:id/history                       @org.maproulette.framework.controller.TaskHistoryController.getTaskHistoryLog(id:Long)
###
# tags: [ Task ]
# summary: Create a Task
# description: Will create a new Task from the supplied JSON in the body. When creating the Task, leave the ID field
#               out of the body json, if updating (generally use the PUT method) include the ID field.
# responses:
#   '200':
#     description: The newly created Task with a unique id.
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# requestBody:
#   description: The JSON structure for the Task body.
#   required: true
#   content:
#     application/json:
#       schema:
#         $ref: '#/components/schemas/org.maproulette.framework.model.Task'
###
POST    /task                                       @org.maproulette.controllers.api.TaskController.create
###
# tags: [ Task ]
# summary: Create a batch of Tasks
# description: Will create multiple new Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /sask POST. If
#               Tasks already exist with the name, they will simply be skipped, ie. not updated.
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# requestBody:
#   description: The JSON structure for the Task body.
#   required: true
#   content:
#     application/json:
#       schema:
#         type: array
#         items:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
###
POST    /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPost
###
# tags: [ Task ]
# summary: Updates a Task
# description: Will update an already existing Task from the supplied JSON in the body.
# responses:
#   '200':
#     description: The updated JSON Task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task that is being updated
# requestBody:
#   description: The JSON structure for the Task body.
#   required: true
#   content:
#     application/json:
#       schema:
#         $ref: '#/components/schemas/org.maproulette.framework.model.Task'
###
PUT     /task/:id                                   @org.maproulette.controllers.api.TaskController.update(id:Long)
###
# tags: [ Task ]
# summary: Update a batch of Tasks
# description: Will update multiple already existing Tasks from the JSONArray supplied in the body. Each JSON object
#               is basically a Task object that is processed similarly to the singular /task POST. If a Task
#               does not exist it will be created from scratch
# responses:
#   '200':
#     description: A simple OK status message
#   '304':
#     description: Not updated responding with empty payload if Task already exists and nothing to update
#   '400':
#     description: Invalid json payload for Task
#   '401':
#     description: The user is not authorized to make this request
# requestBody:
#   description: The JSON structure for the Task body.
#   required: true
#   content:
#     application/json:
#       schema:
#         type: array
#         items:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
###
PUT     /tasks                                      @org.maproulette.controllers.api.TaskController.batchUploadPut
###
# tags: [ Task ]
# summary: Changes status on tasks matching criteria
# description: Will changes status on tasks that match the given search parameters.
# responses:
#   '200':
#     description: A simple OK status message with number of tasks updated.
#   '401':
#     description: The user is not authorized to make this request
###
PUT     /tasks/changeStatus                        @org.maproulette.controllers.api.TaskController.bulkStatusChange(newStatus:Int)
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# description: Retrieves an already existing Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The retrieved Task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id                                   @org.maproulette.controllers.api.TaskController.read(id:Long)
###
# tags: [ Task ]
# summary: Start working on a Task (locks it for the user)
# description: Locks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The locked Task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/start                               @org.maproulette.controllers.api.TaskController.startOnTask(id:Long)

###
# tags: [ Task ]
# summary: Retrieve any change XML that is part of this task's cooperative work
# description: Retrieve change XML that is part of this task's cooperative work.
#              The cooperative work on the task should be consulted to determine
#              if any change exists for the task, and which change format was
#              used (i.e. JOSM, OSMChange, etc).
#
# responses:
#   '200':
#     description: The change XML data
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '404':
#     description: No Task found matching the id, or no change data found on the task
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task for which change XML is desired
#   - name: filename
#     in: path
#     description: A filename to use. Some editors will use this as a hint as
#                  to the change format of the XML. Must be alphanumeric with optional
#                  underscores, dashes, and dots.
###
GET     /task/:id/cooperative/change/$filename<\w[\w\d-_\.]*>            @org.maproulette.controllers.api.TaskController.cooperativeWorkChangeXML(id:Long, filename:String)

###
# tags: [ Task ]
# summary: Retrieve task attachment
# description: Retrieve attachment identified by attachmentId on specified task
#
# responses:
#   '200':
#     description: The attachment data
#   '404':
#     description: No Task found matching the id, or no attachment found matching attachmentId
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task for which attachment is desired
#   - name: attachmentId
#     in: path
#     description: The id of the desired task attachment
###
GET     /task/:id/attachment/$attachmentId<[\w\d-_~\.]+>                 @org.maproulette.framework.controller.TaskController.attachment(id:Long, attachmentId:String)

###
# tags: [ Task ]
# summary: Download task attachment data as file
# description: Download attachment attachment data as file
#
# responses:
#   '200':
#     description: The attachment data
#   '404':
#     description: No Task found matching the id, or no attachment found matching attachmentId
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task for which attachment is desired
#   - name: attachmentId
#     in: path
#     description: The id of the desired task attachment
#   - name: filename
#     in: path
#     description: A filename to use. Some editors will use this as a hint as
#                  to the format of the data. Must be alphanumeric with optional
#                  underscores, dashes, and dots.
###
GET     /task/:id/attachment/$attachmentId<[\w\d-_~\.]+>/data/$filename<[\w\d-_\.]+>           @org.maproulette.framework.controller.TaskController.attachmentData(id:Long, attachmentId:String, filename:String)


###
# tags: [ Task ]
# summary: Release a Task (unlocks it)
# description: Unlocks a Task based on the supplied ID in the URL.
# responses:
#   '200':
#     description: The unlocked Task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task to retrieve
###
GET     /task/:id/release                               @org.maproulette.controllers.api.TaskController.releaseTask(id:Long)
###
# tags: [ Task ]
# summary: Refresh an existing lock on a Task
# description: Refreshes an existing lock, extending its allowed duration, on the
#              task with the supplied ID. The requesting user must already own an
#              active lock on the task (i.e. via the task/:id/start API) or a 403
#              will be raised
# responses:
#   '200':
#     description: The lock was successfully refreshed
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '403':
#     description: The user does not own a lock on the task
#   '404':
#     description: ID field supplied but no Task found matching the id
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task on which the lock is to be refreshed
###
GET     /task/:id/refreshLock                           @org.maproulette.controllers.api.TaskController.refreshTaskLock(id:Long)
###
# tags: [ Task ]
# summary: Retrieves an already existing Task
# description: Retrieves an already existing Task based on the name of the Task rather than an ID
# responses:
#   '200':
#     description: The retrieved Task
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent Challenge of the Task
#   - name: name
#     in: path
#     description: The name of the Task being retrieved
###
GET     /challenge/:id/task/:name                   @org.maproulette.controllers.api.TaskController.readByName(id:Long, name:String)
###
# tags: [ Task ]
# summary: Deletes an existing Task
# description: Deletes an existing Task based on the supplied ID.
# responses:
#   '200':
#     description: A status message containing the ID of the Task that was just deleted
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.exception.StatusMessage'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: No Task found matching the provided name
# parameters:
#   - name: id
#     in: path
#     description: The id of the Task being deleted
###
DELETE  /task/:id                                   @org.maproulette.controllers.api.TaskController.delete(id:Long, immediate:Boolean ?= true)
###
# tags: [ Task ]
# summary: Find Task matching search criteria
# description: Finds a list of Tasks that match a specific search criteria. The search criteria is simply a string that is contained in the Task name. String case sensitivity is ignored.
# responses:
#   '200':
#     description: A list of Tasks found
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: q
#     in: query
#     description: The search string used to match the Task names. Default value is empty string, ie. will match everything.
#   - name: parentId
#     in: query
#     description: This limits the search to the provided challenge and no tasks outside of the provided challenge ID.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: onlyEnabled
#     in: query
#     description: Flag to set if only want to see Tasks from enabled Challenges returned. Default value is true.
###
GET     /tasks/find                                 @org.maproulette.controllers.api.TaskController.find(q:String ?= "", parentId:Long ?= -1, limit:Int ?= 10, page:Int ?= 0, onlyEnabled:Boolean ?= true)
###
# tags: [ Task ]
# summary: Retrieve tags for Task
# description: Retrieves all the Tags that have been added to the specified Task
# responses:
#   '200':
#     description: A list of Tags associated with the Task. Empty array if not found.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Tag'
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
###
GET     /task/:id/tags                              @org.maproulette.controllers.api.TaskController.getTagsForTask(id:Long)
###
# tags: [ Task ]
# summary: Retrieve Tasks based on provided tags
# description: Retrieves all the Tasks that contain at least one of the supplied tags.
# responses:
#   '200':
#     description: A list of Tasks that contain at least one of the supplied tags. An empty list otherwise.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
# parameters:
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 10.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
###
GET     /tasks/tags                                 @org.maproulette.controllers.api.TaskController.getItemsBasedOnTags(tags:String ?= "", limit:Int ?= 10, page:Int ?= 0)
###
# tags: [ Task ]
# summary: Updates Task Tags
# description: Updates the tags on the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A complete comma separated list of tags. If empty, then all tags will be removed.
#     required: true
###
GET  /task/:id/tags/update                              @org.maproulette.controllers.api.TaskController.updateItemTags(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Delete Task Tags
# description: Deletes all the supplied tags from the Task
# responses:
#   '304':
#     description: A basic 304 with NoContent will be returned on a successful delete
#   '400':
#     description: If no tags are supplied a BadRequest response will be returned
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: id
#     in: path
#     description: The ID of the Task
#   - name: tags
#     in: query
#     description: A comma separated list of tags
#     required: true
###
DELETE  /task/:id/tags                              @org.maproulette.controllers.api.TaskController.deleteTagsFromItem(id:Long, tags:String ?= "")
###
# tags: [ Task ]
# summary: Retrieves random Task
# description: Retrieves a random Task based on the search criteria.
# responses:
#   '200':
#     description: The list of tasks that match the search criteria
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.Task'
# parameters:
#   - name: ps
#     in: query
#     description: The search string to match the names of projects to limit the Task pool from. The string is case insensitive.
#   - name: cs
#     in: query
#     description: The search string to match the names of challenges to limit the Task pool from. The string is case insensitive.
#   - name: ct
#     in: query
#     description: The challenge tags to limit the parent challenges that will limit the Task pool.
#   - name: tags
#     in: query
#     description: A comma separated list of task tags. The search will only retrieve random tasks that contain those tags
#   - name: ts
#     in: query
#     description: The task search string. Retrieve only tasks that contain the search string in the task name. Match is case insensitive.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: proximity
#     in: query
#     description: Id of task that you wish to find the next task based on the proximity of that task
###
GET     /tasks/random                               @org.maproulette.controllers.api.TaskController.getRandomTasks(ps:String ?= "", cs:String ?= "", ct:String ?= "", tags:String ?= "", ts:String ?= "", limit:Int ?= 1, proximity:Long ?= -1)
###
# tags: [ Task ]
# summary: Retrieves Tasks within a bounding box
# description: Retrieves tasks within a given bounding box.
# responses:
#   '200':
#     description: The list of clusteredPoints representing Tasks that match the search criteria within the bounding box.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.ClusteredPoint'
# parameters:
#   - name: left
#     in: path
#     description: The minimum latitude for the bounding box.
#   - name: bottom
#     in: path
#     description: The minimum longitude for the bounding box.
#   - name: right
#     in: path
#     description: The maximum latitude for the bounding box.
#   - name: top
#     in: path
#     description: The maximum longitude for the bounding box.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: page
#     in: query
#     description: Used in conjunction with the limit parameter to page through X number of responses. Default value is 0, ie. first page.
#   - name: includeGeometries
#     in: query
#     description: Optional flag to have geometries data returned for each task.
#   - name: includeTags
#     in: query
#     description: Optional flag to have tag data returned for each task.
#   - name: excludeLocked
#     in: query
#     description: Ignore the lock status of the task. So true will include all tasks, including ones locked by another user.
###
PUT     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.framework.controller.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false, includeTags:Boolean ?= false)
###
# tags: [ Task ]
# summary: Retrieves Task Marker Data within a bounding box
# description: Retrieves task marker data within a given bounding box.
# responses:
#   '200':
#     description: The list of markers representing Tasks that match the search criteria within the bounding box.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.ClusteredPoint'
# parameters:
#   - name: left
#     in: path
#     description: The minimum latitude for the bounding box.
#   - name: bottom
#     in: path
#     description: The minimum longitude for the bounding box.
#   - name: right
#     in: path
#     description: The maximum latitude for the bounding box.
#   - name: top
#     in: path
#     description: The maximum longitude for the bounding box.
#   - name: limit
#     in: query
#     description: Limit the number of results returned in the response. Default value is 1.
#   - name: excludeLocked
#     in: query
#     description: Ignore the lock status of the task. So true will include all tasks, including ones locked by another user.
#   - name: includeGeometries
#     in: query
#     description: Optional flag to have geometries data returned for each task.
###
PUT     /markers/box/:left/:bottom/:right/:top        @org.maproulette.framework.controller.TaskController.getTaskMarkerDataInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 500, excludeLocked:Boolean ?= false, includeGeometries:Boolean ?= false, includeTags:Boolean ?= false)
###
# tags: [ Task ]
# summary: Update Task Changeset
# description: Will update the changeset of the task. It will do this by attempting to match the OSM changeset to the Task based on the geometry and the time that the changeset was executed.
# responses:
#   '200':
#     description: The task that was updated. With the updated changeset value
#     content:
#       application/json:
#         schema:
#           $ref: '#/components/schemas/org.maproulette.framework.model.Task'
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the task
###
PUT     /task/:id/changeset                         @org.maproulette.controllers.api.TaskController.matchToOSMChangeSet(id:Long)
###
# tags: [ Task ]
# summary: Update Completion Responses
# description: Will update the completion responses on the Task.
# responses:
#   '304':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the task
# requestBody:
#   description: key/value json to be stored with this task.
#   content:
#     application/json:
#       schema:
#         type: object
###
PUT     /task/:id/responses                           @org.maproulette.framework.controller.TaskController.updateCompletionResponses(id:Long)
###
# tags: [ Task ]
# summary: Update Task Status
# description: Will update a Tasks status to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Can't Complete
# responses:
#   '304':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Can't Complete
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     in: query
#     description: Optional tags to associate with this task
# requestBody:
#   description: Optional key/value json to be stored with this task.
#   required: false
#   content:
#     application/json:
#       schema:
#         type: object
###
PUT     /task/:id/:status                           @org.maproulette.controllers.api.TaskController.setTaskStatus(id:Long, status:Int, tags:String ?="")
###
# tags: [ Task ]
# summary: Update Bundle Task Status
# description: Will update a Bundled list of Tasks statuses to one of the following. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Can't Complete
# responses:
#   '200':
#     description: TaskBundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The bundle or primary task was not found with the supplied Id.
# parameters:
#   - name: bundleId
#     in: path
#     description: The ID of the bundle
#   - name: primaryId
#     in: path
#     description: The primary ID of the task for this bundle
#   - name: status
#     in: path
#     description: The status to update the Task too. Following status Integers can be used. 0 - Created, 1 - Fixed, 2 - False Positive, 3 - Skipped, 4 - Deleted, 5 - Already Fixed, 6 - Can't Complete
#   - name: requestReview
#     in: query
#     description: Boolean indicating if a review is requested on this task. (Will override user settings if provided)
#   - name: tags
#     description: Optional tags to associate with this task
###
PUT     /taskBundle/:bundleId/:status                           @org.maproulette.framework.controller.TaskBundleController.setBundleTaskStatus(bundleId:Long, primaryId:Long, status:Int, tags:String ?="")
###
# tags: [ Task ]
# summary: Update Task Review Status
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed, 5 - Unnecessary, 6 - Approved With Revisions
#   - name: tags
#     description: Optional tags to associate with this task
#   - name: newTaskStatus
#     in: query
#     description: Optional int taskStatus to change the task status on this task to
#   - name: asMetaReview
#     in: query
#     description: Optional boolean to indicate the meta review status should be set to unecessary
#   - name: errorTags
#     in: query
#     description: Optional string to provide error tags in the review history
# requestBody:
#   description: The JSON structure for the Comments body
#   required: false
#   content:
#     application/json:
#       schema:
#         type: object
#         properties:
#           comment:
#             type: string
#             description: User's comment.
#             example: "This is an example comment."
###
PUT     /task/:id/review/:status                           @org.maproulette.framework.controller.TaskReviewController.setTaskReviewStatus(id:Long, status:Int, tags:String ?="", newTaskStatus:String ?= "", errorTags:String ?= "")
###
# tags: [ Task ]
# summary: Changes review status to "Unnecessary" on tasks matching criteria
# description: Will change review status on tasks that match the given search parameters
#              indicating the tasks do not need a review.
# responses:
#   '200':
#     description: A simple OK status message with number of tasks updated.
#   '401':
#     description: The user is not authorized to make this request
# parameters:
#   - name: ids
#     in: query
#     description: Task ids to change (OR search parameters can be used instead)
###
PUT     /tasks/review/remove                               @org.maproulette.framework.controller.TaskReviewController.removeReviewRequest(ids:String?="", asMetaReview:Boolean ?= false)
###
# tags: [ Task ]
# summary: Update Task Review Status for a Bundle
# description: Will update a Tasks review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: Task Bundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the bundle
#   - name: status
#     in: path
#     description: The status to update the Task to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: tags
#     description: Optional tags to associate with this task
#   - name: newTaskStatus
#     in: query
#     description: Optional int taskStatus to change the task status on all tasks in this bundle to
#   - name: errorTags
#     in: query
#     description: Optional string to provide error tags in the review history
# requestBody:
#   description: The JSON structure for the Comments body & Optional key/value to be stored with this task.
#   required: false
#   content:
#     application/json:
#       schema:
#         type: object
#         properties:
#           comment:
#             type: string
#             description: User's comment.
#             example: "This is an example comment."
###
PUT     /taskBundle/:id/review/:status                     @org.maproulette.framework.controller.TaskBundleController.setBundleTaskReviewStatus(id:Long, status:Int, tags:String ?="", newTaskStatus:String ?= "", errorTags:String ?= "")
###
# tags: [ Task ]
# summary: Update Task Meta Review Status
# description: Will update a Tasks meta review status to one of the following. 0 - (re)Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: No Content, update successful
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the task
#   - name: status
#     in: path
#     description: Will update a Tasks meta review status to one of the following. 0 - (re)Requested, 1 - Approved, 2 - Rejected, 3 - Assisted, 4 - Disputed, 5 - Unnecessary
#   - name: tags
#     description: Optional tags to associate with this task
#   - name: errorTags
#     in: query
#     description: Optional string to provide reject tags in the review history
# requestBody:
#   description: The JSON structure for the Comments body
#   required: false
#   content:
#     application/json:
#       schema:
#         type: object
#         properties:
#           comment:
#             type: string
#             description: User's comment.
#             example: "This is an example comment."
#         required:
#           - comment
###
PUT     /task/:id/metareview/:status                           @org.maproulette.framework.controller.TaskReviewController.setMetaReviewStatus(id:Long, status:Int, tags:String ?="", errorTags:String ?= "")
###
# tags: [ Task ]
# summary: Update Meta Review Status for a Bundle
# description: Will update Tasks meta review status to one of the following. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
# responses:
#   '200':
#     description: Task Bundle
#   '401':
#     description: The user is not authorized to make this request
#   '404':
#     description: The task with the supplied ID was not found.
# parameters:
#   - name: id
#     in: path
#     description: The ID of the bundle
#   - name: status
#     in: path
#     description: The review status to update the meta review status to. Following status Integers can be used. 0 - Requested, 1 - Approved, 2 - Rejected, 3 - Assisted
#   - name: tags
#     description: Optional tags to associate with this task
#   - name: errorTags
#     in: query
#     description: Optional string to provide error tags in the review history
# requestBody:
#   description: The JSON structure for the Comments body
#   required: false
#   content:
#     application/json:
#       schema:
#         type: object
#         properties:
#           comment:
#             type: string
#             description: User's comment.
#             example: "This is an example comment."
#         required:
#           - comment
###
PUT     /taskBundle/:id/metareview/:status                     @org.maproulette.framework.controller.TaskBundleController.setBundleMetaReviewStatus(id:Long, status:Int, tags:String ?="", errorTags:String ?= "")
###
# tags: [ Task ]
# summary: Retrieves task clusters.
# description: Retrieves task clusters that contain the centroid location for a group of tasks
# responses:
#   '200':
#     description: An array of task clusters that represents clusters of tasks for a challenge. If none found will return an empty list.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.TaskCluster'
# parameters:
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
###
PUT     /taskCluster                                @org.maproulette.framework.controller.TaskController.getTaskClusters(points:Int ?= 100)
###
# tags: [ Task ]
# summary: Retrieves tasks in a cluster
# description: Retrieves tasks contained in a cluster retrieved from api /api/v2/challenge/:id/taskCluster
# responses:
#   '200':
#     description: An array of tasks that are contained in a cluster. If none found will return an empty list.
#     content:
#       application/json:
#         schema:
#           type: array
#           items:
#             $ref: '#/components/schemas/org.maproulette.framework.model.ClusteredPoint'
# parameters:
#   - name: id
#     in: path
#     description: The id of the parent project.
#   - name: clusterId
#     in: path
#     description: The id of the single cluster.
#   - name: points
#     in: query
#     description: The number of clusters that you want returned
###
GET     /tasksInCluster/:clusterId                  @org.maproulette.framework.controller.TaskController.getTasksInCluster(clusterId:Int, points:Int ?= 100)
###
# tags: [ Task ]
# summary: Retrieves Tasks within a bounding box
# deprecated: true
# responses:
#   '200':
#     description: Success
###
GET     /tasks/box/:left/:bottom/:right/:top        @org.maproulette.framework.controller.TaskController.getTasksInBoundingBox(left:Double, bottom:Double, right:Double, top:Double, limit:Int ?= 10000, page:Int ?= 0, excludeLocked:Boolean ?= false, sort:String ?= "", order:String ?= "ASC", includeTotal:Boolean ?= false, includeGeometries:Boolean ?=false, includeTags:Boolean ?= false)
###
# tags: [ Task ]
# summary: Retrieves task clusters. USE PUT METHOD
# deprecated: true
# responses:
#   '200':
#     description: Success
###
GET     /taskCluster                                @org.maproulette.framework.controller.TaskController.getTaskClusters(points:Int ?= 100)
